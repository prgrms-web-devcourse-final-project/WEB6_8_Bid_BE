version: '3.8'

services:
  mysql_1:
    image: mysql:8.0
    container_name: mysql_1
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      TZ: Asia/Seoul
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_config:/etc/mysql/conf.d
    networks:
      - common
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p1234"]
      interval: 10s
      timeout: 10s
      retries: 50
      start_period: 80s  # ✅ 충분한 초기 대기 시간
    command: --default-authentication-plugin=mysql_native_password

  mysql_init:
    image: mysql:latest
    container_name: mysql_init
    depends_on:
      mysql_1:
        condition: service_healthy
    networks:
      - common
    environment:
      MYSQL_PWD: 1234
    command: >
      bash -c "
        echo 'MySQL 초기화 시작...'
        mysql -h mysql_1 -uroot -p1234 -e \"
          CREATE USER IF NOT EXISTS 'lldjlocal'@'127.0.0.1' IDENTIFIED WITH caching_sha2_password BY '1234';
          CREATE USER IF NOT EXISTS 'lldjlocal'@'172.18.%.%' IDENTIFIED WITH caching_sha2_password BY '1234';
          CREATE USER IF NOT EXISTS 'lldj'@'%' IDENTIFIED WITH caching_sha2_password BY '1234';
          GRANT ALL PRIVILEGES ON *.* TO 'lldjlocal'@'127.0.0.1';
          GRANT ALL PRIVILEGES ON *.* TO 'lldjlocal'@'172.18.%.%';
          GRANT ALL PRIVILEGES ON *.* TO 'lldj'@'%';
          CREATE DATABASE IF NOT EXISTS bid_market;
          FLUSH PRIVILEGES;
        \"
        echo 'MySQL 초기화 완료!'
      "

  redis_1:
    image: redis:latest
    container_name: redis_1
    restart: unless-stopped
    command: redis-server --requirepass 1234
    environment:
      TZ: Asia/Seoul
    volumes:
      - redis_data:/data
    networks:
      - common
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "1234", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  elasticsearch_1:
    build:
      context: .
      dockerfile: elasticsearch.Dockerfile
    container_name: elasticsearch_1
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=1234
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - TZ=Asia/Seoul
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs:ro
      - elasticsearch_data:/usr/share/elasticsearch/data
      - elasticsearch_config:/usr/share/elasticsearch/config/analysis
    networks:
      - common
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:1234 http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  app_1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app_1
    restart: unless-stopped
    depends_on:
      mysql_init:
        condition: service_completed_successfully
      redis_1:
        condition: service_healthy
      elasticsearch_1:
        condition: service_healthy
    environment:
      # Spring Boot 설정
      - SPRING_PROFILES_ACTIVE=prod
      - TZ=Asia/Seoul

      # 데이터베이스 설정
      - SPRING__DATASOURCE__URL___DB_NAME=bid_market

      # Redis 설정
      - SPRING__DATA__REDIS__PASSWORD=1234

      # JWT 설정
      - JWT_SECRET=a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6
      - JWT_ACCESS_TOKEN_EXPIRATION=30
      - JWT_REFRESH_TOKEN_EXPIRATION=7

      # PG 설정 (필요시)
      - PG_TOSS_CLIENT_KEY=${PG_TOSS_CLIENT_KEY:-test_client_key}
      - PG_TOSS_SECRET_KEY=${PG_TOSS_SECRET_KEY:-test_secret_key}
    networks:
      - common
    ports:
      - "8080:8080"
    volumes:
      - app_data:/data

networks:
  common:
    driver: bridge

volumes:
  mysql_data:
  mysql_config:
  redis_data:
  elasticsearch_data:
  elasticsearch_config:
  app_data: